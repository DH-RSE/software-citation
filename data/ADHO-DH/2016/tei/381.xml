<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Picture to Score: Driving Vector Animations with Music in the XML Ecosystem</title>
                <author>
                    <persName>
                        <surname>Ramsay</surname>
                        <forename>Stephen</forename>
                    </persName>
                    <affiliation>University of Nebraska-Lincoln, United States of America</affiliation>
                    <email>sramsay.unl@gmail.com</email>
                </author>
                <author>
                    <persName>
                        <surname>Pytlik-Zillig</surname>
                        <forename>Brian</forename>
                    </persName>
                    <affiliation>University of Nebraska-Lincoln, United States of America</affiliation>
                    <email>bzillig1@unl.edu</email>
                </author>
            </titleStmt>
            <editionStmt>
                <edition>
                    <date>2016-03-04T15:32:00Z</date>
                </edition>
            </editionStmt>
            <publicationStmt>
                <publisher>Maciej Eder, Pedagogical University in Krakow</publisher>
                <publisher>Jan Rybicki, Jagiellonian University</publisher>
                <address>
                    <addrLine>Institute of Polish Studies</addrLine>
                    <addrLine>Pedagogical University</addrLine>
                    <addrLine>ul. Podchorazych 2</addrLine>
                    <addrLine>30-084 Krakow, Poland</addrLine>
                    <addrLine>maciej.eder@ijp-pan.krakow.pl</addrLine>
                </address>
            </publicationStmt>
            <sourceDesc>
                <p>Converted from a Word document </p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <appInfo>
                <application ident="DHCONVALIDATOR" version="1.21">
                    <label>DHConvalidator</label>
                </application>
            </appInfo>
        </encodingDesc>
        <profileDesc>
            <textClass>
                <keywords scheme="ConfTool" n="category">
                    <term>Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="subcategory">
                    <term>Short Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="keywords">
                    <term>SVG</term>
                    <term>MusicXML</term>
                </keywords>
                <keywords scheme="ConfTool" n="topics">
                    <term>audio, video, multimedia</term>
                    <term>xml</term>
                    <term>standards and interoperability</term>
                    <term>English</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text>
        <body>
            <p>Audio can be united with video using a number of different techniques. Among the most common are “score to picture” and procedural generation.</p>
            <p>“Score to picture” is a feature of most modern DAWs (Digital Audio Workstations), such as 
                <hi rend="italic">Pro Tools, Logic, Cubase,</hi> and 
                <hi rend="italic">REAPER.</hi> A composer plays forward the video—usually in the very advanced stages of post production—and sets cues within the software around which a musical soundtrack can be structured. Thus a composer might set a cue to indicate suspense leading up to a particular moment, or the beginning and end of a romantic scene that should be accompanied with incidental music.
            </p>
            <p>Procedural generation goes the other way. Here, a composer creates music—often in a sophisticated audio synthesis environment like 
                <hi rend="italic">Max/MSP, Pd, Impromptu,</hi> or 
                <hi rend="italic">SuperCollider</hi>—and uses properties of the audio signal or of the overall program flow to cue events in a video presentation. Since these are full-fledged (if visual) programming languages, driving video with them often means combining the complexity of software engineering with the complexity of handling audio and video signals.
            </p>
            <p>In this short presentation, we describe our experiments with a method of uniting audio and video that lies somewhere between these two approaches. Unlike the practice associated with contemporary filmmaking, our method begins with a musical score and uses events indicated within it as the set of cues for an animation. Rather than use procedural programming or digital signal processing to inform the creation of cues, we use the ordinary conventions of Western musical notation.</p>
            <p>To accomplish this, we first represent the score in MusicXML. This might seem an odd choice, given that the MIDI (Musical Instrument Digital Interface) standard was designed precisely to indicate performance events over time. MusicXML, by contrast, was primarily conceived as a way of providing interoperability among software for rendering musical scores as printable objects. Yet MusicXML contains, as one explanation of the standard puts it, a “MIDI-compatible part” concerned with how the music should sound (as opposed to how it should look) (MakeMusic, 2016). </p>
            <p>Our system exploits these MIDI-compatible elements—along with several other features of the markup—in order to indicate where a change might occur in an animation. In this way, we are able to use such things as rehearsal marks (sectional markings intended to make it easier for conductors to refer to particular passages), tempo markings, indications of changes in volume (amplitude), emphases, articulations, orchestration, and other aspects of musical notation as cues. And since everything about the duration of a piece and the relationship of the cues within the piece are discernable from the MusicXML file alone, we are able to produce SVG animations that are perfectly in sync with the music from which they are “generated”. In the simplest case, this might involve simple changes in color or the movement of shapes, but the system is fully capable of quite advanced 2D animation.</p>
            <p>From an artistic standpoint, our way of doing things hearkens back to the earliest days of animation when popular short films were synced to the music of Wagner, Rossini, and Dukas. In this sense, ours is perhaps a new way of doing an old-fashioned thing. But unlike earlier eras, artists today have access to very sophisticated tools for producing digital art. Digital artists regularly use vector graphics programs (like Adobe 
                <hi rend="italic">Illustrator</hi> and the free 
                <hi rend="italic">Inkscape)</hi> that can generate SVG, and scoring programs (like 
                <hi rend="italic">Finale, Sibelius,</hi> and the free 
                <hi rend="italic">MuseScore)</hi> that can generate MusicXML. What is missing, we think, is a robust way to bridge these two technologies.
            </p>
            <p>Our system provides a very sophisticated bridge in the form of 
                <hi rend="italic">Indigo</hi>—an SVG animation system developed at CDRH that we have recently re-engineered along the lines we illustrate above. In this presentation, we briefly explain how Indigo works and demonstrate how it can facilitate interoperability between SVG and MusicXML (perhaps with the world premier of an original animated score in honor of this year's conference theme).
            </p>
            <p>Our presentation requires only the most rudimentary knowledge of musical notation and SVG.</p>
        </body>
        <back>
            <div type="bibliogr">
                <listBibl>
                    <head>Bibliography</head>
                    <bibl>
                        <hi rend="bold">MakeMusic </hi>(2016). <hi rend="italic">MusicXML: Tutorial</hi>. http://www.musicxml.com/tutorial/the-midi-compatible-part/ (accessed 27 Oct 2016).
                    </bibl>
                </listBibl>
            </div>
        </back>
    </text>
</TEI>
