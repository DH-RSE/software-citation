<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>SpotiBot-Turing testing Spotify</title>
                <author>
                    <persName>
                        <surname>Snickars</surname>
                        <forename>Pelle</forename>
                    </persName>
                    <affiliation>Umea university, Sweden</affiliation>
                    <email>pelle.snickars@umu.se</email>
                </author>
            </titleStmt>
            <editionStmt>
                <edition>
                    <date>2016-02-24T08:49:00Z</date>
                </edition>
            </editionStmt>
            <publicationStmt>
                <publisher>Maciej Eder, Pedagogical University in Krakow</publisher>
                <publisher>Jan Rybicki, Jagiellonian University</publisher>
                <address>
                    <addrLine>Institute of Polish Studies</addrLine>
                    <addrLine>Pedagogical University</addrLine>
                    <addrLine>ul. Podchorazych 2</addrLine>
                    <addrLine>30-084 Krakow, Poland</addrLine>
                    <addrLine>maciej.eder@ijp-pan.krakow.pl</addrLine>
                </address>
            </publicationStmt>
            <sourceDesc>
                <p>Converted from a Word document </p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <appInfo>
                <application ident="DHCONVALIDATOR" version="1.18">
                    <label>DHConvalidator</label>
                </application>
            </appInfo>
        </encodingDesc>
        <profileDesc>
            <textClass>
                <keywords scheme="ConfTool" n="category">
                    <term>Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="subcategory">
                    <term>Long Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="keywords">
                    <term>streaming music</term>
                    <term>digital methods</term>
                    <term>bots as informants</term>
                    <term>Turing test</term>
                </keywords>
                <keywords scheme="ConfTool" n="topics">
                    <term>audio, video, multimedia</term>
                    <term>media studies</term>
                    <term>English</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text>
        <body>
            <p>Producing and coding bot ‘listeners’ has today become almost as easy as automated music production has been for years. Machines can thus both ‘create’—and ‘listen’ to ‘music’ (whatever we mean by these categories). In fact, such notions are capricious within the contemporary streaming music landscape. The project, “Streaming Heritage: Following Files in Digital Music Distribution” (financed by the Swedish Research Council) studies emerging streaming media cultures in general, and the music service Spotify in particular, with a bearing on the digital challenges posed by direct access to musical heritage. Rediscovering older music is key for Spotify, and the project is hence on the one hand geared towards investigating the institutional challenges of streaming musical heritage, and on the other hand—and foremost—to develop new digital research methods. Situated at HUMlab (Umeå university) part of the project is essentially about Turing testing Spotify. Building on the tradition of ‘breaching experiments’ in ethnomethodology, my research group seeks to break into the hidden infrastructures of digital music distribution in order to study its underlying norms and structures. The key idea is to follow files’ (rather than the people making or using them) on their distributive journey through the streaming ecosystem. The setting include the distribution and aggregation of self-produced music/sounds through Spotify; the set-up of our own record label (for research purposes); the programming of bots to inform, explore, mimic, and ultimately subvert notions of usage and listening; the tracing of Spotify’s history through constantly changing interfaces (web archiving and documenting these). Research questions range from various way how streaming music is commodified? What sounds are perceived as music (or not) according to Spotify and adjacent aggregating services? How is metadata generated, ordered, and valued—and what kind of metadata is actually available? What normative world views are promoted and materialized by streaming architectures? What kind of infrastructures proliferate behind the surfaces of on-demand services?</p>
            <p>My presentation departs from the fact that one-fifth of Spotify’s catalogue of 30 million songs haven’t once been listened to at all. Under the computational hood of streaming services all streams are equal, and every stream thus means (potentially) increased revenue from advertisers. Spotify is hence likely to include—rather than reject—various forms of (semi-)automated music, sounds and (audio)bots. At HUMlab we therefore set up an experiment—SpotiBot—with the purpose to determine if it was possible to provoke, or even to some extent undermine, the Spotify business model (based on the 30 second royalty rule). Royalties from Spotify are only disbursed once a song is registered as a play, which happens after 30 seconds. The SpotiBot engine was be used to play a single track repeatedly (both self-produced music and Abba’s ”Dancing Queen”), during less and more than 30 seconds, and with a fixed repetition scheme running from 10 to <hi rend="italic">n</hi> times, simultaneously with different Spotify account. Based on a set of tools provided by Selenium the SpotiBot engine automated the Spotify web client by simulating user interaction within the web interface. From a computational perspective the Spotify web client appeared as black box; the logics that the Spotify application was governed by was, for example, not known in advance, and the web page structure (in HTML) and client side scripting complex. It was not doable within the short experiment to gain a fuller understanding of the dialogue between the client and the server. As a consequence, the development of the SpotiBot-experiment was (to some extent) based on ‘trial and error’ how the client behaved, and what kind of data was sent from the server for different user actions. Using a single virtual machine—hidden behind only one proxy IP—the results nevertheless indicate that it is possible to automatically play tracks for thousands of repetitions that exceeds the royalty rule. Even if we encountered a number of problems and deviations that interrupted the client execution, the Spotify business model can be tampered with. In other words, one might ask what happens when—not if—streaming bots approximate human listener behavior in such a way that it becomes impossible to distinguish between a human and a machine? Streaming fraud, as it has been labeled, then runs the risk of undermining the economic revenue models of streaming services as Spotify. </p>
        </body>
    </text>
</TEI>
