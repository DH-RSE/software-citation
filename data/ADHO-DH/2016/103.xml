<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>The Stanford Code Poetry Slam through Critical Code Studies</title>
                <author>
                    <persName>
                        <surname>Kagen</surname>
                        <forename>Melissa</forename>
                    </persName>
                    <affiliation>Stanford University, United States of America</affiliation>
                    <email>mkagen@stanford.edu</email>
                </author>
            </titleStmt>
            <editionStmt>
                <edition>
                    <date>2016-03-03T21:58:00Z</date>
                </edition>
            </editionStmt>
            <publicationStmt>
                <publisher>Maciej Eder, Pedagogical University in Krakow</publisher>
                <publisher>Jan Rybicki, Jagiellonian University</publisher>
                <address>
                    <addrLine>Institute of Polish Studies</addrLine>
                    <addrLine>Pedagogical University</addrLine>
                    <addrLine>ul. Podchorazych 2</addrLine>
                    <addrLine>30-084 Krakow, Poland</addrLine>
                    <addrLine>maciej.eder@ijp-pan.krakow.pl</addrLine>
                </address>
            </publicationStmt>
            <sourceDesc>
                <p>Converted from a Word document </p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <appInfo>
                <application ident="DHCONVALIDATOR" version="1.21">
                    <label>DHConvalidator</label>
                </application>
            </appInfo>
        </encodingDesc>
        <profileDesc>
            <textClass>
                <keywords scheme="ConfTool" n="category">
                    <term>Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="subcategory">
                    <term>Short Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="keywords">
                    <term>critical code studies</term>
                    <term>performance</term>
                    <term>poetics</term>
                    <term>language</term>
                </keywords>
                <keywords scheme="ConfTool" n="topics">
                    <term>literary studies</term>
                    <term>text analysis</term>
                    <term>creative and performing arts, including writing</term>
                    <term>genre-specific studies: prose, poetry, drama</term>
                    <term>english studies</term>
                    <term>English</term>
                    <term>digital humanities - multilinguality</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text>
        <body>
            <p>This paper reports on, analyzes, and contextualizes a project I have co-founded and run since 2013, the Stanford Code Poetry Slam (
                <ref target="http://tinyurl.com/codepoetryslam">tinyurl.com/codepoetryslam</ref>). This is a series of international contests in which we solicit code poetry, whatever that means to our submitters, and then curate the best works. At each event, the best submissions are then “slammed” by human performers and (often) simultaneously by the computer programs that run them. The project explores the performative potential of computer languages, situates itself within the growing discipline of critical code studies, and has produced some fascinating work. In this short paper, I'll explain the project, analyze several of the poems as code and as poetry, and place the Stanford Code Poetry Slams in the context of recent conversations in critical code studies, particularly with reference to performance. How do humans perform code, and how does that differ from the way computers perform it? The connective aspect, I will argue, is based in the languages code poets use to write their works, each of which afford different performative possibilities. Through a close analysis of the linguistic choices our authors made, I will show in this brief presentation some of the commonalities between critical code studies and translation studies.
            </p>
            <p>Many of our code poets have written and performed works that reference older poetic movements or forms, repurposing them for a digital medium. In Zak Kain’s “Capsized,” written in beautifully descriptive CSS, you can see a clear reference to imagistic works like William Carlos William’s “The Red Wheelbarrow”; utilizing sparse but evocative descriptions, Kain’s poem paints a harsh picture and simultaneously comes off as jokey and whimsical. This duality illustrates a fascinating, secretive aspect to code poetry, where the tone and content of the poem can imply one reading and the very language in which it’s written (and the specific rules of that language) can inspire another reading entirely. In this case, the surrogate performer did a great job of presenting both aspects of the work, by starting sadly and then growing increasingly over-dramatic.</p>
            <p>The code poem that won CPS 1.1 also played with performance to get across a profound point, in this case crossing seamlessly between aspects of performativity in digital, theatrical, religious, and social media realms. In “21
                <hi rend="superscript">st</hi> Century Prophecies,” Hunter Bacot wrote a poem that calls the most recent tweet from seven “Prophets” (famous twitter users with huge followings) and strings those tweets together into a list of “virtues.” In Keshav Dimri’s performance, each line was intoned with the solemnity of a sermon (“Let KingJames be added to the list of virtues!”) and the resulting poem (the 7 most recent tweets) was spoken like a biblical verse. “21
                <hi rend="superscript">st</hi> Century Prophecies” references movements like bricolage and found poetry by rearranging already extant text in new ways, and it gestures towards “Curation as Creation” and ideas found in the Digital Humanities Manifesto 2.0.
            </p>
            <p>Other kinds of code poems make art out of the strenuous constraints imposed by coding languages, if one’s goal is to write a text that actually compiles. Constrained texts reference much older poetic forms, like the sonnet, which require following a complicated set of rules about syllabic stresses and end rhymes. Many Perl poets write these kinds of texts. One of our best examples was Mike Widner’s “A Pythonic Lament,” which prints out “Alas! Alas!” when run.</p>
            <p>Finally, in linguistic double coding, a sentence is readable in multiple languages at once. “Jean put dire comment on tape” reads in English (albeit a little ungrammatically) and, in translation from French, says "Jean is able to say how one types." Poems that are readable to humans and readable to computers perform a kind of cyborg double coding, and the ramifications of this possibility for translation studies are one of the themes the CPS series explores. Julian Bliss’ “Polymorphism,” the winning poem from CPS 2.0, took this idea to an incredible extreme, as he created a piece of text that, when compiled in multiple languages, produces a different poem in each. Moreover, each output poem parodies a clichéd English-language poem.</p>
            <p>This presentation will analyze these and other works of code poetry we’ve slammed, showing how the languages in which they were written greatly affect their performative potential and demonstrate the performative nature of translation.</p>
        </body>
    </text>
</TEI>
